@model WmsSystem.ViewModels.DashboardViewModel
@{
    ViewBag.Title = "WMS Dashboard";
}

<div class="row mt-3">
    <!-- KPI Cards -->
    <div class="col-12 mb-4">
        <div class="row" id="kpiCards">
            <div class="col-md-3 mb-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Total Items</h6>
                                <h3 class="mb-0" id="totalItems">@Model.KpiData.TotalItems</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-box-seam fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Total Locations</h6>
                                <h3 class="mb-0" id="totalLocations">@Model.KpiData.TotalLocations</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-geo-alt fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Out of Stock</h6>
                                <h3 class="mb-0" id="redLevelItems">@Model.KpiData.RedLevelItems</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-exclamation-triangle fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Low Stock</h6>
                                <h3 class="mb-0" id="yellowLevelItems">@Model.KpiData.YellowLevelItems</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-exclamation-circle fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="col-lg-8 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-graph-up"></i> Transaction Trends (30 Days)
                </h5>
            </div>
            <div class="card-body">
                <canvas id="transactionChart" height="100"></canvas>
            </div>
        </div>
    </div>

    <div class="col-lg-4 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-bar-chart"></i> Top 10 Items Issued
                </h5>
            </div>
            <div class="card-body">
                <canvas id="topItemsChart" height="200"></canvas>
            </div>
        </div>
    </div>

    <!-- Heatmap Section -->
    <div class="col-12 mb-4">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-grid-3x3-gap"></i> Warehouse Heatmap
                    </h5>
                    <div class="d-flex gap-2">
                        <select id="warehouseFilter" class="form-select form-select-sm" style="width: auto;">
                            <option value="">All Warehouses</option>
                            @foreach (var wh in Model.Warehouses)
                            {
                                <option value="@wh.Key">@wh.Value</option>
                            }
                        </select>
                        <select id="zoneFilter" class="form-select form-select-sm" style="width: auto;">
                            <option value="">All Zones</option>
                        </select>
                        <select id="aisleFilter" class="form-select form-select-sm" style="width: auto;">
                            <option value="">All Aisles</option>
                        </select>
                        <button id="refreshHeatmap" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="heatmapContainer" style="height: 400px; position: relative;">
                    <canvas id="heatmapChart"></canvas>
                </div>
                <div class="mt-3">
                    <small class="text-muted">
                        <i class="bi bi-info-circle"></i> 
                        Color intensity represents stock density. Darker colors indicate higher stock levels.
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Alerts -->
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-bell"></i> Recent Alerts
                </h5>
            </div>
            <div class="card-body">
                <div id="alertsContainer">
                    @if (Model.RecentAlerts != null && Model.RecentAlerts.Any())
                    {
                        foreach (var alert in Model.RecentAlerts)
                        {
                            <div class="alert alert-@alert.Type alert-dismissible fade show" role="alert">
                                @alert.Message
                                <small class="d-block text-muted">@alert.Timestamp.ToString("yyyy-MM-dd HH:mm")</small>
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-muted text-center py-3">
                            <i class="bi bi-check-circle fs-1"></i>
                            <p class="mt-2">No alerts at this time</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@2.0.1/dist/chartjs-chart-matrix.min.js"></script>
<script src="~/signalr/hubs"></script>

<script>
$(document).ready(function() {
    // Initialize SignalR connection
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/wmsHub")
        .build();

    connection.start().then(function () {
        console.log("[v0] SignalR connected");
    }).catch(function (err) {
        console.error("[v0] SignalR connection error:", err);
    });

    // Listen for real-time updates
    connection.on("TransactionCreated", function (data) {
        console.log("[v0] Transaction update received:", data);
        refreshDashboard();
    });

    // Chart variables
    var transactionChart, topItemsChart, heatmapChart;

    // Initialize charts
    initializeCharts();
    loadHeatmapFilters();
    loadHeatmapData();

    function initializeCharts() {
        // Transaction trend chart
        $.get('@Url.Action("GetTransactionChart")', function(data) {
            var ctx = document.getElementById('transactionChart').getContext('2d');
            transactionChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.Labels,
                    datasets: [{
                        label: 'Receive',
                        data: data.ReceiveData,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1
                    }, {
                        label: 'Issue',
                        data: data.IssueData,
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        tension: 0.1
                    }, {
                        label: 'Move',
                        data: data.MoveData,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });

        // Top items chart
        $.get('@Url.Action("GetTopItemsChart")', function(data) {
            var ctx = document.getElementById('topItemsChart').getContext('2d');
            topItemsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.Labels,
                    datasets: [{
                        label: 'Quantity Issued',
                        data: data.Data,
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                afterLabel: function(context) {
                                    return 'Item: ' + data.ItemNames[context.dataIndex];
                                }
                            }
                        }
                    }
                }
            });
        });
    }

    function loadHeatmapFilters() {
        $.get('@Url.Action("GetHeatmapFilters")', function(data) {
            // Populate zone filter
            var zoneSelect = $('#zoneFilter');
            zoneSelect.empty().append('<option value="">All Zones</option>');
            data.Zones.forEach(function(zone) {
                zoneSelect.append('<option value="' + zone + '">' + zone + '</option>');
            });

            // Populate aisle filter
            var aisleSelect = $('#aisleFilter');
            aisleSelect.empty().append('<option value="">All Aisles</option>');
            data.Aisles.forEach(function(aisle) {
                aisleSelect.append('<option value="' + aisle + '">' + aisle + '</option>');
            });
        });
    }

    function loadHeatmapData() {
        var warehouseId = $('#warehouseFilter').val() || null;
        var zone = $('#zoneFilter').val() || null;
        var aisle = $('#aisleFilter').val() || null;

        $.get('@Url.Action("GetHeatmapData")', { 
            warehouseId: warehouseId, 
            zone: zone, 
            aisle: aisle 
        }, function(data) {
            if (data.error) {
                console.error("[v0] Heatmap error:", data.error);
                return;
            }

            var ctx = document.getElementById('heatmapChart').getContext('2d');
            
            if (heatmapChart) {
                heatmapChart.destroy();
            }

            heatmapChart = new Chart(ctx, {
                type: 'matrix',
                data: {
                    datasets: [{
                        label: 'Stock Level',
                        data: data.Data,
                        backgroundColor: function(context) {
                            var value = context.parsed.v;
                            var alpha = Math.min(value, 1);
                            return `rgba(54, 162, 235, ${alpha})`;
                        },
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        borderWidth: 1,
                        width: ({chart}) => (chart.chartArea || {}).width / data.AisleLabels.length - 1,
                        height: ({chart}) => (chart.chartArea || {}).height / data.ZoneLabels.length - 1,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            min: -0.5,
                            max: data.AisleLabels.length - 0.5,
                            ticks: {
                                stepSize: 1,
                                callback: function(value) {
                                    return data.AisleLabels[value] || '';
                                }
                            },
                            title: {
                                display: true,
                                text: 'Aisle'
                            }
                        },
                        y: {
                            type: 'linear',
                            min: -0.5,
                            max: data.ZoneLabels.length - 0.5,
                            ticks: {
                                stepSize: 1,
                                callback: function(value) {
                                    return data.ZoneLabels[value] || '';
                                }
                            },
                            title: {
                                display: true,
                                text: 'Zone'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: function(context) {
                                    var point = context[0].raw;
                                    return `Zone: ${point.Zone}, Aisle: ${point.Aisle}`;
                                },
                                label: function(context) {
                                    var point = context.raw;
                                    return [
                                        `Total Stock: ${point.TotalStock}`,
                                        `Locations: ${point.LocationCount}`,
                                        `Density: ${(point.V * 100).toFixed(1)}%`
                                    ];
                                }
                            }
                        },
                        legend: {
                            display: false
                        }
                    }
                }
            });
        });
    }

    function refreshDashboard() {
        // Refresh KPI data
        $.get('@Url.Action("GetKpiData")', function(data) {
            $('#totalItems').text(data.TotalItems);
            $('#totalLocations').text(data.TotalLocations);
            $('#redLevelItems').text(data.RedLevelItems);
            $('#yellowLevelItems').text(data.YellowLevelItems);
        });

        // Refresh charts
        if (transactionChart) {
            $.get('@Url.Action("GetTransactionChart")', function(data) {
                transactionChart.data.labels = data.Labels;
                transactionChart.data.datasets[0].data = data.ReceiveData;
                transactionChart.data.datasets[1].data = data.IssueData;
                transactionChart.data.datasets[2].data = data.MoveData;
                transactionChart.update('none');
            });
        }

        if (topItemsChart) {
            $.get('@Url.Action("GetTopItemsChart")', function(data) {
                topItemsChart.data.labels = data.Labels;
                topItemsChart.data.datasets[0].data = data.Data;
                topItemsChart.update('none');
            });
        }

        // Refresh heatmap
        loadHeatmapData();

        // Refresh alerts
        $.get('@Url.Action("GetRecentAlerts")', function(data) {
            var container = $('#alertsContainer');
            container.empty();
            
            if (data.length > 0) {
                data.forEach(function(alert) {
                    var alertHtml = `
                        <div class="alert alert-${alert.Type} alert-dismissible fade show" role="alert">
                            ${alert.Message}
                            <small class="d-block text-muted">${new Date(alert.Timestamp).toLocaleString()}</small>
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>`;
                    container.append(alertHtml);
                });
            } else {
                container.html(`
                    <div class="text-muted text-center py-3">
                        <i class="bi bi-check-circle fs-1"></i>
                        <p class="mt-2">No alerts at this time</p>
                    </div>`);
            }
        });
    }

    // Event handlers
    $('#warehouseFilter, #zoneFilter, #aisleFilter').on('change', function() {
        loadHeatmapData();
    });

    $('#refreshHeatmap').on('click', function() {
        loadHeatmapData();
    });

    // Auto-refresh every 30 seconds
    setInterval(function() {
        refreshDashboard();
    }, 30000);
});
</script>
}
